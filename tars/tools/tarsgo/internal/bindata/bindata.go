// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.
// sources:
// hack/cmake/CMakeDetermineGoCompiler.cmake
// hack/cmake/CMakeGoCompiler.cmake.in
// hack/cmake/CMakeGoInformation.cmake
// hack/cmake/CMakeTestGoCompiler.cmake
// hack/cmake/golang.cmake
// hack/cmake/tars-tools.cmake
// hack/scripts/makefile.tars.gomod.mk
// hack/scripts/makefile.tars.mk
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmakeCmakedeterminegocompilerCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x73\xab\x36\x14\xdd\xf3\x2b\xee\x28\x5e\xe0\x76\x6c\xb7\xcb\x66\x55\x85\xc8\x84\x29\x1f\xae\xc0\x9e\xb4\xc9\x1b\x8d\x82\x05\xd1\x18\xa4\x0c\x60\xbf\x0f\x8f\xff\xfb\x1b\xbe\x6c\x12\x93\xc7\x06\xe9\x4a\xf7\xde\xa3\x73\x8e\x74\x23\x13\x88\x75\xfe\x26\x33\x51\x80\xc8\xdf\xaa\xef\x50\xbd\x0a\x05\xa9\xa8\x60\x5f\x48\xe0\x6a\x0b\xa5\xa8\xc0\xf2\xf0\x3f\x84\xd9\x01\xb3\x02\x6f\xe5\xb8\x84\xc2\x06\x53\x43\x26\xa6\x1f\x44\xfd\xa2\x3e\x2f\x4e\x0d\x80\x6e\x6d\x42\xfc\xcd\x71\x90\x77\x82\x30\xa2\xe4\xdf\x35\x76\x01\xa1\x29\xdc\x10\x7f\x63\x0e\x96\xa7\x20\xcb\x16\x87\x01\x00\x35\x0c\x96\xc8\x4c\x28\x9e\x0b\x56\xe3\xd4\x4a\xa8\xca\xbc\x6a\xc8\x1c\xdf\x19\xeb\xb5\xa2\x81\x4d\xb1\xd7\xff\x19\xa6\x76\x78\x81\xbb\x74\xb1\x1d\x32\xe2\x6f\x9a\xf4\xa9\xd1\xb4\x94\x89\xf9\xe9\x06\x68\xbe\x52\x8c\x21\xc0\xd4\xfe\x13\xd0\xe4\xf8\x49\xf2\x09\x81\x85\xad\x07\x52\x1f\xdf\xf1\x6d\x40\x4b\x59\x94\x15\xf0\x22\xdd\xe7\x42\x55\x50\x69\xb0\xf5\x59\x0a\xd4\xf6\x12\x6a\x2b\x13\xf3\x02\xac\x26\x94\x3c\x3a\x61\x14\xc2\xa0\xd1\x3b\x12\x4e\x3d\xca\x5c\x94\x25\x4f\x85\x19\x12\xff\x9e\x11\x4a\x03\x0a\xc8\xd2\xfb\x6c\x0b\x4a\x57\x90\x48\xb5\xbd\x08\x5f\x2b\x2c\x15\x08\x75\x90\x85\x56\x0d\x9e\x03\x2f\x24\x7f\xc9\x04\x0c\xf8\xbc\x7d\x56\x57\x14\xcf\xaf\xa1\x0e\x87\xdf\x44\xbc\xaf\x04\x7b\x2b\x74\x2c\xca\xd2\xb4\x02\xcf\xc3\xfe\x3d\xa4\xba\x6e\x06\x76\xb0\xc2\xd1\x03\x04\xeb\x68\xb5\x8e\xd8\x06\x53\x07\xdf\xb9\xa4\x0b\x37\x05\xca\xaa\x90\x2a\x35\x29\xb1\xc9\x23\x50\xb2\x72\xb1\x45\x00\x3d\xab\x09\x02\x84\xfa\x7c\x34\x39\xb6\xa3\x13\x6a\x93\x44\x65\xda\x9a\xdd\x39\x3e\xab\xa3\x0d\xbe\xf3\x96\x76\xd6\x1e\xe3\x2a\x40\x83\x20\xba\x0e\x2c\x5e\xa4\x1a\x06\x2f\xa7\x6f\xa2\x8b\x7d\x59\x9c\xb7\x34\x93\x4c\xc7\x3c\x3b\x87\x1a\x4c\x43\x5b\xbd\x13\xac\xa5\x6f\xd4\x53\x9f\x8b\xdc\x79\xa9\x3d\xbd\xad\xc1\x1a\xfa\x46\x64\xa5\xe8\x4d\x53\xeb\x5c\xb3\x9f\x16\x3c\x1f\x69\xe0\x63\x8f\x84\xb5\x1a\x75\xa5\xda\x54\x03\xda\x3a\x27\x7d\x90\x10\xce\x1a\x8e\x80\x3b\x01\xa0\x83\x28\x4a\xa9\x15\x1a\x51\xd5\xc5\xbe\xcd\x36\x84\x86\x4e\xe0\x77\xf8\xda\xdb\xd0\xe9\xeb\xe1\xc8\x7a\x00\x94\xea\xa7\x3f\x66\x7f\x7d\xf9\x7d\xfe\xee\xf7\x04\x0b\x3c\xfb\x9f\xcf\x7e\xd4\xb3\xdf\x10\x74\x75\x5a\xf1\x87\x95\x4f\x9d\x23\xfb\x0b\x80\x66\x33\x88\x5e\x05\xd8\x3a\xe3\x2a\xbd\x98\x5e\x6e\x85\xaa\x64\x22\x63\x5e\x49\xad\xea\x77\x67\x72\xfc\x45\x09\xeb\x55\xc4\x3b\x48\x74\x01\x5f\x75\xb1\x93\x2a\xfd\x58\xf0\x76\x94\x91\x56\x91\xfe\x46\x9c\x07\x39\x2f\x76\x8c\x97\x8c\x6f\x0f\x5c\xc5\x62\x7b\xad\xcd\xd4\x30\x62\xad\x12\x99\xee\x0b\xd1\xbc\x81\x66\x5f\xde\x5a\x53\x4a\xfc\x88\x85\xc1\x9a\x5a\x84\xdd\x3b\xf4\xb4\x88\x73\xbe\x13\x0b\xcb\xe3\x3b\x61\xeb\xde\x0d\xf3\x26\x3a\x6f\x6c\xd8\x27\xaf\x5c\x1c\x2d\x03\xea\x31\xc7\x5f\x06\x6d\xee\x68\x16\xfc\x1d\xf8\xee\x7f\x53\xc3\x18\x7f\xed\xea\x67\x6d\x83\x29\xa0\xc1\x6d\x40\x53\xe3\x67\x00\x00\x00\xff\xff\x7c\x96\x46\x5a\x4f\x06\x00\x00")

func cmakeCmakedeterminegocompilerCmakeBytes() ([]byte, error) {
	return bindataRead(
		_cmakeCmakedeterminegocompilerCmake,
		"cmake/CMakeDetermineGoCompiler.cmake",
	)
}

func cmakeCmakedeterminegocompilerCmake() (*asset, error) {
	bytes, err := cmakeCmakedeterminegocompilerCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmake/CMakeDetermineGoCompiler.cmake", size: 1615, mode: os.FileMode(420), modTime: time.Unix(1661308924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmakeCmakegocompilerCmakeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x0a\xc2\x30\x14\x85\xe1\xbd\x4f\x71\xc9\x64\x17\x51\xf0\x01\x1a\xd2\xd3\x12\x9a\xe6\x86\xdb\xa4\xb8\xdd\x49\x1c\x3b\xe8\xfb\x23\x2e\x8a\xb1\xeb\xe1\xe3\xe7\x3c\x6e\xcf\x83\x9b\xed\x04\x1d\x37\x75\x3c\x27\x1f\x20\x64\xba\xbf\xad\x33\x6d\xb3\x8b\x35\xb0\xed\xd1\xd3\xb9\x6d\x7e\xc1\xc2\x45\x1c\x74\xf0\x01\x8a\x6b\x46\x5c\x3c\xc7\x85\xee\x5b\x15\x0a\x3e\x4e\x10\x4d\x82\x01\x82\xe8\x40\x97\x53\x45\xb8\xe4\x54\xf2\xb7\x42\xc7\x3a\x52\x0b\x15\xa4\x60\x1d\xde\xb7\xf6\x6f\x23\xae\xba\x5a\x21\x33\xf2\x67\x34\x6d\xf3\x0a\x00\x00\xff\xff\x2d\x4f\x79\xa3\x11\x01\x00\x00")

func cmakeCmakegocompilerCmakeInBytes() ([]byte, error) {
	return bindataRead(
		_cmakeCmakegocompilerCmakeIn,
		"cmake/CMakeGoCompiler.cmake.in",
	)
}

func cmakeCmakegocompilerCmakeIn() (*asset, error) {
	bytes, err := cmakeCmakegocompilerCmakeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmake/CMakeGoCompiler.cmake.in", size: 273, mode: os.FileMode(420), modTime: time.Unix(1661308924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmakeCmakegoinformationCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcd\xb1\xaa\x83\x30\x14\x87\xf1\x3d\x4f\xf1\xc7\x49\x07\xdf\x40\x04\x0d\x07\xf1\x1a\x93\x8b\x46\xe8\x96\xa1\x8d\x25\x34\xf5\x14\xea\xfb\x53\x5a\x87\x16\x4b\xe7\xef\x83\x5f\x98\x53\x6d\x2c\x64\x5f\x75\xe4\x1a\x76\xd2\xf4\xff\xad\x22\x67\xea\x3f\x92\x36\x13\xc0\xdd\xaf\xe9\x8f\x8c\xe4\xcc\x58\x99\x23\x8e\x7c\xbd\x85\xe8\x91\x47\xe4\x1a\x39\xa3\xd8\x8e\x12\xc5\x68\xa6\x41\x52\x89\x24\x13\x7e\x39\x85\x39\xcd\x84\xd8\xab\xaa\xd5\x9d\xa3\x03\xc9\xc9\x56\xb5\xa2\x2f\x76\xd7\xdf\x6e\x0c\xcb\xe5\xc5\xd9\x6a\x68\xe8\xc9\x6d\xee\x58\xe2\x13\x7c\x04\x00\x00\xff\xff\x66\x8f\x90\x26\xe6\x00\x00\x00")

func cmakeCmakegoinformationCmakeBytes() ([]byte, error) {
	return bindataRead(
		_cmakeCmakegoinformationCmake,
		"cmake/CMakeGoInformation.cmake",
	)
}

func cmakeCmakegoinformationCmake() (*asset, error) {
	bytes, err := cmakeCmakegoinformationCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmake/CMakeGoInformation.cmake", size: 230, mode: os.FileMode(420), modTime: time.Unix(1661308924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmakeCmaketestgocompilerCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\xd1\x70\xf6\x75\xf4\x76\x8d\x77\xcf\x8f\x77\xf6\xf7\x0d\xf0\xf4\x71\x0d\x8a\x0f\xf7\x0f\xf2\x0e\x56\x30\x54\x70\x76\x74\xf6\x70\x55\xf0\xf4\x0b\x71\x0d\xf2\x73\xf4\x51\x50\x52\xd2\xe4\x02\x04\x00\x00\xff\xff\xb5\x30\x45\x6b\x31\x00\x00\x00")

func cmakeCmaketestgocompilerCmakeBytes() ([]byte, error) {
	return bindataRead(
		_cmakeCmaketestgocompilerCmake,
		"cmake/CMakeTestGoCompiler.cmake",
	)
}

func cmakeCmaketestgocompilerCmake() (*asset, error) {
	bytes, err := cmakeCmaketestgocompilerCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmake/CMakeTestGoCompiler.cmake", size: 49, mode: os.FileMode(420), modTime: time.Unix(1661308924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmakeGolangCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xcd\x6e\xa3\x3c\x14\xdd\xf3\x14\x57\x34\x0b\xf8\xa4\xf6\x7b\x82\x2e\x1c\xf0\x50\xab\xe6\x67\x1c\xd3\x51\x57\x16\xc1\x4e\xca\x08\xf0\x28\x90\xaa\x55\xc4\xbb\x8f\x80\xa4\x24\x9d\x34\x29\xd3\xcc\xce\xc1\xc7\xf7\x9c\xfb\x77\x52\xa9\xda\x72\x7c\x74\x8f\x05\x62\xce\x1d\x79\xc0\x22\x8c\x79\x14\x73\xe1\x12\x86\x1d\x1e\xb2\x47\x98\x6c\x7a\x80\x13\x33\x86\x03\x2e\xa6\x24\x40\xec\xb1\x05\x34\xb6\x31\xbc\xa7\x64\xca\xda\xef\x7f\xfb\x9e\xc5\x01\x27\xfe\x58\x7e\xe3\x0a\x96\x1a\x96\xaa\x86\xc5\xba\x4c\xeb\x4c\x97\xc6\xee\x60\xe1\x97\x5a\xad\xca\x24\xf7\x74\xb4\xd2\x3f\x55\x5a\x0b\x24\x25\x70\xc4\x3c\xdb\x00\x48\xa4\x14\xe9\xba\xaa\x75\x21\xea\x64\xb5\x54\xb5\x35\xd9\xb4\x77\x0d\xa8\xf2\x19\xbc\x30\x42\xfc\xee\x76\xb2\xe9\x0f\xcd\x9b\x0a\x4f\x0b\x27\xf4\x23\x42\x31\x6b\x3a\xde\xc9\x06\x31\x2f\x68\x6c\x43\x95\xf2\x34\xb5\x6d\x0c\xda\x5a\xf6\xa5\x16\xea\x45\xa5\xeb\x3a\x99\xe7\x0a\x02\xe4\xe3\x56\xd7\x22\xcb\x95\xe5\xd1\x70\x0a\x5e\x28\x66\x61\xcc\x1c\x0c\x0c\x53\xc4\xc9\x03\x06\xf3\x7d\x31\x7a\x40\x57\x0c\x13\xcc\xff\x6e\x96\xda\xb4\x0d\x03\xe0\x0a\x0a\x55\x55\xc9\x52\x59\x6d\x0a\x5b\x58\x63\xbf\xbb\x39\x5d\xf9\xe6\xff\xc9\xa6\x55\xd5\x74\x11\xf7\xea\x95\xea\xa2\x48\x4a\x69\xf5\x0f\xe0\x7c\x9c\x9b\x3a\x93\xaf\x06\x00\x80\x13\xfa\x3e\x0a\xdc\xe3\xe5\x2c\xb4\x84\x03\x24\x0e\xf8\x90\xf2\x51\xa8\xd9\x61\x7f\x84\xec\x9e\x04\xde\x89\xa1\xa1\x64\xc6\x77\x23\xf3\xe5\x5c\x0a\x55\xd5\x49\xf1\xeb\x20\xa1\xcf\x0f\xcd\x7c\x9d\xe5\x12\xae\xf5\x90\xd9\xd9\x06\x98\x43\xa4\x50\x7c\xa3\xc8\x9b\xb5\xb1\x87\xbe\x7e\xa2\x60\x6f\xac\x9f\x26\x3d\xc3\xd9\x57\xde\xc5\x11\x0e\xdc\xd9\xa8\x19\xf8\x42\xb7\xde\x36\xb5\x57\x88\x28\x1d\xa7\x60\xdb\xb9\x61\x69\x0f\xb6\xf6\x8f\xa5\xdc\xdf\x58\xe4\xba\x6d\x25\xb6\x36\xd7\xad\x2b\x4c\x63\x42\x5d\xc1\x1f\xa3\x6e\x73\xb3\x85\x35\x7c\x80\x19\x67\xf8\x7b\x8c\x28\x98\x33\x8e\x38\x71\x4c\xbb\x4b\xbe\x35\xbc\x1e\xe5\x87\x2e\x86\xeb\xae\x2f\x85\x96\xea\x36\xbd\x4e\x56\xe9\x53\xf6\xac\x06\x20\x25\x53\xd1\x11\x99\x79\x36\xdf\x26\x7d\x93\x74\x91\x54\x5e\x29\xeb\x7c\xc8\xea\x29\x59\x29\xd9\xe3\xb2\x85\x85\xa2\x88\xe2\xfe\xd7\x09\x06\xf9\x9a\x67\xf3\xad\xde\x3d\x9e\x13\x2f\x2a\xbd\x83\x97\x32\x5b\x74\xf8\xdd\xe9\x32\x96\x76\x7a\x67\x87\x5e\xef\xcf\xd9\x18\xb7\x19\xe7\x37\x97\x75\x9c\x77\xea\x2f\xe1\x2e\x93\xcd\x30\x10\xcd\x81\xd7\x7c\xf4\x37\xdd\xae\xfd\xae\xb5\x23\xfd\xe6\xcb\xe2\x46\x69\x1b\x69\x4b\xc7\x47\xe3\x5f\x59\xd0\xf1\x56\x7e\x60\x37\x87\x8e\x62\x1b\xbf\x03\x00\x00\xff\xff\x4d\xb0\x1b\xde\x8c\x09\x00\x00")

func cmakeGolangCmakeBytes() ([]byte, error) {
	return bindataRead(
		_cmakeGolangCmake,
		"cmake/golang.cmake",
	)
}

func cmakeGolangCmake() (*asset, error) {
	bytes, err := cmakeGolangCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmake/golang.cmake", size: 2444, mode: os.FileMode(420), modTime: time.Unix(1661308924, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmakeTarsToolsCmake = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x8f\xe3\x4a\x11\x3f\xc7\x9f\xa2\xf1\xcc\xc1\x79\x22\x89\xb4\xdc\x46\x1a\x81\x27\xe9\xc9\x98\xf5\xd8\xc1\x71\x76\x76\xa5\x48\x96\xc7\xee\x24\xd6\x3a\xb6\x65\x77\xe6\xed\xbe\x51\x6e\x48\x80\x40\x7a\x20\x21\x0e\x5c\x10\x12\x02\x6e\xdc\x10\xe2\x89\x6f\xf3\x76\x97\x8f\x81\xaa\xdb\x7f\x63\x27\x93\xc9\xcb\xec\x2e\x82\x5c\x76\x6d\x57\x55\xff\xea\x4f\x57\x55\x57\x8f\x20\x90\x37\xc4\x59\x51\x62\x45\x71\xe8\x90\x24\x91\xfa\xfa\xf5\xb5\xac\x0d\xd0\x3c\x44\x24\xb8\x43\x43\x7d\x24\x9b\x57\x48\x9f\x98\xa3\x89\x69\xbd\x90\x0d\x45\xbe\x50\x71\xfa\xba\x2d\x24\x34\xf6\x82\xb9\x64\xe0\x21\x7e\x89\x0c\x3c\x52\xe5\x3e\x46\xe2\x34\x38\x15\x91\x28\x66\xcc\xe2\xe9\x3d\xff\xdf\x5a\x6c\x0b\x09\xa1\x52\xff\x5a\x7e\x8e\xad\x6b\x7d\x30\x51\xb1\xc5\x48\x4e\xef\x6b\xef\xd6\xc0\xc7\xdf\xf6\x27\x86\x81\x35\xd3\x1a\xeb\x13\xa3\x8f\xad\x81\x62\xac\x7b\xce\xd2\x7e\x4d\xc4\xb6\x20\x78\x81\xe3\xaf\x5c\x22\x3d\x48\xdc\x9b\x87\xbe\x1d\xcc\xbb\xec\xa1\x2d\x94\x90\xc8\x46\xff\x4a\x79\x81\xad\x54\xcb\x81\x62\xe0\xbe\xa9\x1b\xaf\x72\x58\x17\x8a\x26\x1b\xaf\xb8\x2c\xdf\xbb\x2d\x6b\xa1\x2a\x17\x06\x7c\x3b\x84\xd7\x98\x68\xa6\x72\xbd\xe7\xba\xb7\x5e\x00\xda\xce\xa4\x1b\x45\xfb\xc1\xb3\xb6\xd0\x02\x39\xa6\x6c\x8c\x9f\xf5\x47\xa3\x92\x8d\x81\xb0\x47\xed\x38\x79\x36\x0f\xbb\xe4\x0d\xd8\x28\x27\xb5\x36\xfc\xd1\x40\x4b\xfc\x84\x48\xfb\x49\xdf\x57\x32\x48\x0d\x5c\x6f\x26\xa5\x46\x67\xf4\x37\xf8\xc2\xba\xd2\xc7\x26\xc4\x49\x5f\xee\x5f\x61\x34\x36\x0d\x45\x1b\x22\x31\x21\x14\x7d\x49\x6e\xd1\x22\x4c\xa8\xd8\x16\x94\x4b\xb4\xc1\x31\x36\x0d\xfc\x93\x89\xac\x22\xb1\x82\xa0\x90\xb8\xa0\x34\x3a\xeb\xf5\xbe\x24\xb7\x5d\x80\xd0\x75\xc2\xa5\xd8\x16\xb0\x36\x00\x59\x65\x10\xa6\xfe\x1c\x6b\xdb\x11\xd0\xf0\x35\x09\x20\xc6\x4e\x50\xce\x62\x60\x15\xcb\x63\x5c\x04\x67\xd9\x47\xf1\x2a\xe8\xc4\xc4\x27\x76\x42\xba\x59\x80\xe6\x9c\x93\x91\xaa\xcb\x83\xed\x8c\xab\xc8\x0f\x6d\xb7\xce\x67\xca\xc6\x76\x26\x6a\xc7\x39\x87\x70\x82\x2e\x15\x15\x4b\x37\x86\x62\x62\x74\x7a\x5f\xc6\xbb\x46\x22\x7e\x89\xfb\x13\x13\x5b\x23\x43\xef\xe3\xf1\x38\xdf\xe9\xf9\xc6\xe1\xcf\x6b\xd4\xc1\x88\x38\x8b\x10\xa5\x9a\x20\xdb\xf7\xdb\x53\xb0\x43\x5d\x3a\xd7\xe9\x10\xe1\x5c\xdb\x5d\xb2\x4d\xd9\x58\x33\x17\x0b\xb3\x55\xe0\x50\x2f\x0c\xa4\x39\x09\x2c\xf0\x28\x32\x65\x63\x88\xcd\xb6\x20\xb4\x66\x9e\x4f\xa4\xa1\xaa\x5f\x58\x06\xee\x4f\x8c\x31\x46\x8c\x59\xd1\x46\x13\x13\x7d\xc1\xfc\x0f\x64\x60\x4d\x7d\x62\x5a\xec\xe3\x95\xa5\x2a\x63\xc6\xed\xcd\xd2\xe0\x62\xf4\xf0\xa6\x35\x0b\x63\x62\x3b\x0b\xfe\x1a\x50\x65\x78\x18\xc9\xba\x2d\xb4\x5a\xad\x39\xa1\x16\x2c\x1c\xd8\x4b\x62\x39\xe1\x32\x0a\x03\x12\xa4\xee\xd2\xe4\xeb\x9c\x05\xd8\xd7\x08\xde\x58\x37\xf8\x41\xce\x34\x13\x96\x38\x79\x92\x05\x3e\x96\x34\x26\x06\xc7\x3f\xc4\x5a\x46\xc7\x37\x5b\xfa\x00\x0b\xad\xbb\x0b\xce\x61\xbb\xae\xe5\xac\x12\x1a\x2e\x61\x9d\xa5\x1d\xb8\x12\xbc\x6e\xb5\x78\xb6\x01\xcf\x94\xe4\xad\xf9\xb7\x1b\xdd\x78\xae\x68\xc3\x4a\x2a\x2a\xd6\xe1\x34\x85\x6b\xb3\xfc\xb0\x46\x9d\x70\x45\x5d\x2f\x46\x60\xee\x4e\x14\x87\x34\x74\x42\x1f\xa2\x36\xdd\x66\xba\x6a\x5d\xaa\xf2\x70\x2d\xe6\xef\x98\x82\x62\x21\x11\x6b\x66\xf6\x6d\x97\xc8\x9a\x44\xd4\x20\x6f\x80\x47\x58\x1b\x8c\x2b\x08\xcb\x64\x40\xc5\x8d\xe4\x7b\x09\x95\xe4\x11\x90\xa3\x8d\xf0\xd8\x34\x10\x63\x20\x81\x9b\xc5\x07\x7b\x2e\x19\x99\xda\xf1\x9c\x50\x89\xad\x33\xc4\xe6\x1a\xc9\xaa\x8a\x0a\x24\x1b\xd2\xb9\xb8\x84\x50\xcb\xf5\x62\xe2\xd0\x30\x7e\x0b\x25\x38\x22\x31\xf5\x48\x22\x8d\x0c\x7d\x84\x0d\x53\xc1\x63\x24\x0f\x06\x8a\xa9\xe8\x9a\xac\x5a\x7c\x27\xa9\x58\xd6\x98\x1e\x63\x30\xd8\xa6\x5c\xd8\x2f\xad\x3c\xdd\x02\xde\x6c\xf3\x40\x82\xf8\xf0\xdb\x3f\xbc\xff\xf9\xaf\xdf\xfd\xe3\xcf\x60\xd5\xf7\xbf\xfb\xd9\xb7\xdf\xfc\xfd\xc3\xef\x7f\xfa\xee\xeb\xbf\xbd\xff\xc5\x5f\xfe\xfd\xc7\x5f\x7d\xf8\xeb\x2f\xdf\xfd\xf3\x6b\x61\x69\x3b\x71\xc8\x36\x5b\x42\xe2\x3b\x12\x23\x79\x34\x2a\x6d\x39\x88\x45\xbe\xf1\x53\x18\xa7\xf7\xb2\x31\xe4\x16\x4a\xab\x71\xae\x15\x28\x73\x7a\x3f\x32\xf4\x1f\xe3\x7e\xa5\x26\x03\x71\x9a\xaf\x2a\xbb\x77\x6c\xf4\x53\xa9\x48\xfc\xa2\xcb\x8a\x87\xc0\xcc\x3c\x0f\x2d\xde\xab\xd8\xb7\x3e\x29\xcc\xdc\xde\x3b\x05\x78\xb3\xca\x56\x87\xbd\xc8\xb3\x89\xc4\x42\xac\x2c\x91\x2d\xe8\x92\x88\x04\x2e\x09\x1c\xae\x43\xe6\xd6\x1a\x71\x6e\xec\xd6\x09\x24\x62\x20\x40\x27\xc7\xfa\x81\xd0\x55\x42\x91\x13\x13\x9b\x12\x44\x97\x11\xca\x03\xe6\xfb\xc8\xbe\x0b\x3d\x17\xf9\x5e\xb0\x7a\x83\x58\x15\x40\x4e\x18\xcc\x7c\xcf\xa1\xdf\x13\x5a\x63\x6c\x4a\xc6\x44\x83\xe8\xc8\xd2\x2f\xcf\x67\xbb\x8a\x49\xa1\x59\x5e\x56\x5a\x95\xd4\xdc\x24\xf1\x90\xfc\xbf\x7c\x0d\x9b\xbb\x13\x35\xf6\x3a\x74\x19\xf5\x0a\x13\xb3\xfa\xc0\x51\xa4\x5b\xf5\x78\x30\xe2\x25\xea\xc4\xb3\x4f\x07\x02\x6c\x5c\xa4\x80\x4f\x6c\x0c\x27\x8c\xde\x22\x68\xdc\x8a\x68\x7f\x10\x50\x8f\x23\x12\x5a\xca\x65\xde\x99\x1e\x1f\x5e\x1d\x19\xb4\xab\x7b\xa3\x6b\x61\x75\x8c\xa5\x8f\x84\xec\x11\xa8\xa0\x23\x95\xda\x2d\x68\x63\xd2\xaa\x92\x36\x89\xa7\xf7\xe5\x04\xbb\x7e\x12\xe4\x85\xcb\xb3\xd5\x1e\x01\x1d\xdc\xad\x8c\x2b\x7d\x42\x2a\x83\xb5\x39\x4f\x62\xe6\xca\x3e\x79\x3c\xe2\x3c\x06\x9e\x28\x08\x0e\xc2\x94\x45\x40\xb9\xb3\xd8\x16\x03\x4f\xb0\xed\x9d\x05\x64\xe1\x6d\x78\x59\x29\x73\xbe\x9a\xdd\xa1\x62\xdb\xd1\xf9\x57\xa8\xa6\xc7\xd3\xb8\xdb\x9b\x59\xae\x37\x9b\x91\x98\x04\xf4\x61\x9b\xa6\xc8\xea\x54\x15\x8a\x2c\x5b\x35\x74\xc7\x45\x5f\x5c\x13\xd1\xa5\xde\x92\x24\xd4\x5e\x46\xc2\x96\x26\xb9\xc6\x23\x54\x3a\xe5\x4d\x0d\x47\xdb\xcc\x24\x6c\xb6\xaf\x00\x5c\x28\xf7\xc8\xcd\x3e\xd9\x54\x6a\xb3\x1b\x85\xda\x5e\xea\x46\x77\xa9\x58\x0f\xb4\xd2\x71\x6c\x7f\x27\x6e\x55\x31\x73\x01\xef\x96\xd2\x73\xe0\x11\x1b\xa6\xac\xef\x49\x77\xcf\x66\xeb\x93\xf5\xa2\xcd\xc7\xef\xa6\xfe\xa7\x56\xd9\xca\xbd\x50\xc3\x2a\x87\xe4\xe1\xd4\xc8\xd9\x0c\x63\xdd\xb3\x23\xaf\xc7\x21\x59\x76\xe0\x5a\xd1\xea\xd6\xf7\x92\x05\xea\x5c\x26\xab\x84\x9c\xff\xa8\x1a\xf6\x9d\x4b\x3b\x8a\x7c\xcf\xb1\xa1\xd1\x3f\x3f\xbd\x97\xd9\x01\xea\x72\x19\xba\x2b\x9f\x58\x70\xd6\x3c\x2f\xca\x53\xe7\x12\x22\x9e\x04\xf4\xdc\x25\x77\xc4\x87\x33\x47\xc7\x5e\xd1\x30\xb5\x40\x96\x9a\xea\x7b\xfa\xb1\xaa\x96\x0e\xa8\x74\xe1\xc5\x6e\x64\xc7\xf4\x2d\x1b\x0c\x39\xab\xd8\x4f\x0b\xf8\x5e\x6a\xff\x90\x7a\xce\x6b\x42\xcf\xf3\xd3\xdf\x73\xac\xad\xff\x8b\x6c\x91\x79\x79\x1a\x74\x8e\xf7\x6b\x6c\x6d\xfe\x1f\x9a\x7b\xa8\x0a\xe1\xf7\xbf\x12\x7a\x5b\xdd\xfa\x04\xb1\x98\x77\xb4\x90\xdd\xf9\x44\xe1\xdd\x6f\xfe\xf5\xed\x37\x7f\xda\x5d\x9a\xb8\xc2\x8f\xaa\xac\xb5\x12\x09\xf5\xad\x5c\x72\xf9\x69\x38\x2f\x42\x4d\x36\xab\x54\xd5\xb4\x0c\x71\x9f\x75\xab\x6e\xb5\x03\x17\xa5\xd1\xd0\xed\x76\xc5\x2d\xf5\xf1\x80\x51\xe8\x2e\x74\x79\x95\x44\xbc\x4e\x66\xc3\xd8\x23\x16\xca\x13\x94\x95\xca\x74\x48\xbc\x77\xad\x4c\xc1\x34\x14\x4b\x90\xba\x39\x54\x6d\x9d\xa0\x3d\xa6\xaa\x27\xe8\xf0\xb9\xea\x43\xbc\xdb\x27\xab\xc0\xf9\xd8\xd9\x2a\xf0\x94\xee\x61\xe0\xb1\x9e\x7c\x9b\x4c\xfa\xdd\x66\x03\xce\xd9\x74\x4a\xed\x38\x61\xb3\xd0\xe9\x34\x1b\x89\x4e\xa7\x3c\x68\xe1\xdf\xea\x90\xa0\x00\x56\xc9\x1f\x47\x40\xc6\x8f\x8e\x51\x36\x3a\x29\x8f\x49\x3f\x27\x98\xe9\xb1\xec\x08\xf8\x88\x9f\x10\x6f\x06\x00\x55\xfc\x11\x5d\x7e\x8a\xb5\x17\xf7\x57\xfa\x35\x5e\xf7\x72\xc8\xbd\x0c\x71\x8f\x03\xae\xcd\x86\x3e\x8d\xdb\x3f\x33\xa8\x8d\xae\x3f\x18\x63\xea\xfe\x89\xa6\xbc\xfc\x88\xde\xef\x2d\xc2\x25\x29\x21\xfd\xac\xfc\xfd\xc9\xc1\x35\x7a\xf8\x11\xa8\xb2\xb1\x3d\x3c\x94\x86\x2f\x5b\x0b\x14\x23\xdc\xd5\xc6\xa4\x45\x91\x4b\xdf\xb3\x93\x01\xd2\x86\xe3\x3e\xbc\xde\xd2\xc9\x34\x5a\xae\xe0\x60\xcd\x8c\x63\xfb\xfe\x2e\x72\xb1\x2d\xa0\xf4\xc7\x38\x1b\xba\x99\x43\xae\x8d\x77\x42\xcc\x2d\xcf\xec\x8e\x24\xf6\x37\x01\xfc\xa2\xa9\x2d\x08\x75\xbb\xe6\x4d\xe1\xbe\x3d\x61\x83\xbd\xca\x7d\x19\xbb\x1e\xaf\x2f\x93\x39\x6d\x7f\x9f\x6d\xf1\x4d\xc5\x6a\x8d\x1a\xf1\x0e\xf5\xbb\xaa\x63\xca\xec\xee\x6c\x49\x92\xc4\x9e\x13\x49\x3c\x62\x13\x5f\xfc\xc4\x76\xb1\x00\x07\x57\xdc\xdc\x9d\xa1\xfc\x97\x21\x2f\x5d\xeb\xd5\x39\x0b\xb5\x1a\x38\x4b\x3a\x97\x39\xeb\xf7\x85\x67\x05\x67\xc3\x65\x62\xc3\xaa\x13\x45\x1d\x58\xe6\xab\x11\x6e\x5a\x35\xff\x58\x5d\x55\x95\xcd\x4b\xdd\xb8\x2e\x71\x94\x56\x4d\x3f\x56\x38\xb2\xeb\xe5\x46\x8e\xfc\xee\x79\x93\x23\x3f\x73\x9e\x35\x70\x14\x07\xd2\x1a\x1b\x3b\x7b\xd6\x96\xaa\x1c\x4c\xcb\x3c\x4f\x15\x19\xc2\x7f\x02\x00\x00\xff\xff\x83\x32\x0a\xf3\x35\x26\x00\x00")

func cmakeTarsToolsCmakeBytes() ([]byte, error) {
	return bindataRead(
		_cmakeTarsToolsCmake,
		"cmake/tars-tools.cmake",
	)
}

func cmakeTarsToolsCmake() (*asset, error) {
	bytes, err := cmakeTarsToolsCmakeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmake/tars-tools.cmake", size: 9781, mode: os.FileMode(493), modTime: time.Unix(1682498124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsMakefileTarsGomodMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xff\x73\x9b\x38\x16\xff\xd9\xfc\x15\xef\xbc\xe4\x6c\x65\x0d\xae\x93\x9b\xce\x8e\x3d\xbe\x0b\x75\x5c\x27\x3d\xc7\x78\xb0\xdb\x99\x9b\xa4\xc3\x12\x10\x58\x53\x40\x1c\xc8\x4e\xdb\x34\xff\xfb\x8d\x24\xc0\xe0\x90\x6c\xbb\xdb\xcc\x9c\x7f\xc8\xa0\xa7\xa7\x8f\xde\x37\x7d\xf4\x94\x5f\xb4\x9f\xfb\x53\x7e\xf1\xc9\x67\x70\x03\x0a\x2e\x8d\x12\x12\x62\xc0\x69\x4a\x53\x05\x7f\x4e\x68\xca\x60\x3e\xb1\x8d\xf9\x1c\x00\xc6\x80\x63\xfb\xfd\x4a\x7f\xbf\x7e\xab\xfd\x56\xce\x1a\x8b\x19\xc0\xa3\xd9\x9f\x6e\xa3\x32\x33\x97\xc6\xfa\x02\xfe\x35\x06\xb5\x9b\x6d\x70\x18\x42\x40\x01\xc7\x3b\x90\x13\x48\x99\x99\x96\x69\xae\x1b\x15\xf8\x04\x57\x80\xdc\x52\xf5\x5e\xca\x1e\xfa\xb7\x24\xee\x07\x54\x99\x99\xf6\xd5\xe5\xc2\xb4\xec\x0f\x53\x6b\x75\x69\x2e\x60\x0f\xa2\x76\x67\x26\x82\x1d\x4e\x33\x42\x63\xf8\x06\xee\x96\x81\xe6\xc2\xe0\x1f\x5a\x31\xf0\x3a\xd0\x01\xcd\x1f\xec\xc7\x3a\x1f\x9f\xa0\x47\xb0\x83\xd7\x30\x86\xc1\x6b\xe5\xe7\x87\x27\x24\xb7\x89\xc3\x36\x63\xf5\x3e\xdb\xde\x66\x0c\x86\x3d\xe8\x71\xcb\x45\x68\x1e\x94\x99\x79\x65\x9e\xbf\x9f\x4f\x17\xc6\xd5\x74\xb8\xf7\x6d\x83\x1d\x0f\xb4\x78\x00\x01\xd5\x23\xea\xc1\x37\x70\xee\x3e\x41\xe7\x3e\x49\x49\xcc\x40\x55\x4f\x1e\x3a\x48\x51\x88\x8f\xff\x0b\xdd\x9e\xda\xf5\x49\xec\x65\x2c\x25\x71\x00\x1a\xdd\x32\x8f\xa4\x3d\xb5\xfb\xee\x64\x66\xda\x6f\xe7\xc6\x0c\x21\xa4\xf0\xf0\x96\x02\x00\xf8\x75\x5c\x68\x8e\x99\x93\x66\x5a\x92\x52\x46\x5d\x1a\x2a\x38\xf6\x88\xff\x04\x74\x44\xbd\x6d\x88\xbf\x07\x5a\x6a\x8e\x79\x3a\xf7\xfe\x3d\x14\xe0\xcb\x37\x27\x79\xca\x5b\xc2\x67\x9f\xa4\x19\xbb\xa3\xa9\xc7\xfd\x2f\xa3\x04\x65\x98\x10\x12\xe5\x20\x6d\x7c\x81\x1c\x29\x6b\xc3\x5a\xd9\x2b\x6b\x22\x6c\x12\x26\xdd\x91\xd0\x73\x9d\xd4\x83\x63\x9d\xc7\x07\x29\x4b\xcb\x2c\x35\x7e\x3d\xd0\x10\x86\x89\xa2\x2a\x34\x1e\x81\x04\x14\xfd\x7c\xc3\x85\xed\x2e\x4d\xbe\xf8\x9c\x1b\xc6\x40\x7c\x60\x38\x63\xa0\x7d\x85\xb6\xda\x35\x96\x4b\xd4\x86\x6f\xdf\xaa\xb2\xb5\x61\xcd\xa6\x6b\xd4\x1e\x01\xdb\xe0\x18\x6e\x14\xa8\xff\xb0\xbb\xa1\xd0\xbe\xee\x18\xcb\x65\x07\x68\x0a\x1d\xb9\xa0\x03\x34\x61\xfc\x94\x91\x0c\x70\x94\xb0\x2f\xfa\xc7\xf6\x08\xf0\x67\xc2\x60\x30\xaa\xa3\xb4\x70\x98\x61\xb8\x51\x5a\xad\x42\x50\x58\xf5\x37\xd0\x78\x82\x4f\xd0\x13\x9b\xb7\x5a\xf9\xee\x0b\x0a\xd9\xd6\xdd\x80\x47\xd2\x21\xd7\xef\x41\x4c\xef\xe0\x0e\x83\x9b\x62\x87\x61\x20\x8c\x6f\x2f\x97\xb7\x5a\xad\x56\xf4\xc9\x23\x29\x68\x89\x04\xe7\x5b\xb7\x5a\x3e\xa9\xd9\x55\x62\x4f\x68\xf2\x05\x44\xb8\xd4\xee\x00\x81\xf6\x4f\xb1\x88\x7b\x53\xd3\x76\x13\xd0\x76\x52\x45\x5a\x2c\x50\x7d\x32\x52\x14\x63\x3e\x1f\x42\x19\xc9\x17\xc9\x69\x89\x3e\x04\x5e\x99\x6f\xde\x5f\xce\xcf\x61\x69\x99\xf2\x83\x1f\x0b\x5e\x68\x48\x69\x49\x0a\xe4\x04\xc1\x88\xf7\xa5\x18\xdf\x6e\x49\xe8\x49\x35\xb1\x42\x9e\x54\xd0\x28\xa8\x67\x2f\x53\x84\xc4\x8f\x39\x5d\xa8\x5d\xce\x14\x89\x8c\x8e\x38\x50\x08\xf5\x90\x52\xfa\x30\xac\xce\x00\x3f\x57\x27\x01\x55\x5a\x67\x32\x37\x37\xaf\x4e\x4f\xaf\x4f\x4f\x47\x83\x48\x6a\x9d\xcc\x4c\x24\x64\xaf\x22\x90\x73\xaf\x47\x83\x08\xd4\xfb\x02\xe2\x01\xf2\x69\x5d\xd7\xdb\xdc\xf9\x62\x15\x54\x19\xaa\xba\xa7\xc2\x8b\xf3\x09\x7b\x4a\x3b\x62\x2a\x4c\x13\x55\xd2\xde\xf3\x61\xee\x61\xce\x03\xdc\xaf\x22\x23\x1c\xa6\x10\x83\x24\x29\x2d\xc0\xb1\x16\xd0\xfa\x48\xe3\xb0\x69\xe2\x36\x78\x2c\xf5\x1a\xbd\xcd\x91\x0f\x9c\x95\x08\x6a\x57\x50\x29\xe2\x6a\x6f\x0a\x8f\x1f\x40\xed\x3a\x9e\x97\xa4\x98\x77\x0f\x9a\xa4\x76\x5b\x5c\x42\x9c\x53\x33\xde\x1c\xa8\x5d\x7e\x64\xf6\x66\x23\x84\x2a\x23\x1e\x4b\x9f\xa6\xd8\x71\x37\x22\x0a\xbd\x8a\xdb\x6a\x17\xef\x9c\x10\x9e\xdb\xbe\xb6\x65\xb1\x13\xc7\x11\x9b\xc8\x0f\xa4\xb4\x7c\x9a\xca\x93\x48\xe2\xbd\x59\xa5\x41\xfc\x1c\x7b\x54\x9c\x3b\x8f\xa4\xb1\x13\xe1\xb1\x2a\xb0\xf8\x27\xa8\xaa\x80\x11\x87\xfd\x49\x2b\x02\x6a\xd3\x2d\x1b\xab\x6a\xb1\x4a\xab\x24\xe1\xd1\x54\xd5\x66\xb5\xbe\x8f\xb4\x25\xc6\xb2\x7c\x9a\xd2\x5e\x2d\x1e\x01\x54\xaf\x9e\x97\x38\x73\xcc\x49\x2b\x3c\x04\x6a\x77\x62\x2e\xde\x5e\xce\xb8\x29\xc4\x87\x6b\x49\xb6\xf9\xac\xcd\xa2\xc4\xe6\x79\xf8\x58\x72\x6f\xc1\x88\x5c\xba\x71\x32\x4e\xe6\x19\x1b\x3e\x5a\xd1\x03\xe7\x96\xa6\x4c\x6f\x4b\x0a\xdc\x53\xfe\x9e\xe7\x2b\xf4\x7b\xb0\xb8\x5f\x4a\x44\xa2\x38\xa9\xa6\x7e\x93\xcd\xcf\x2d\xed\xcb\x9d\xdd\x06\x77\x46\xfc\xa0\x82\xa6\xe1\xcf\x6e\xb8\xf5\xf0\xb8\xad\x67\xbb\xb8\x5d\x15\xd8\x52\xe0\x7e\xdd\x55\xf6\xd5\x59\xf0\x15\xaa\xf8\xae\x07\xba\x2e\xb7\x91\xa1\xf3\x2b\x77\x25\xd7\x6e\xd7\x02\xd7\x8a\x76\xa0\x3d\x0d\xa8\xff\xee\xf1\x5b\xea\xd7\xa3\xff\x1c\x45\x47\xde\xd1\xc5\xd1\xd5\xd1\xea\x77\xae\x22\x77\x90\x37\x93\x00\x79\xc6\x6b\x01\xa9\xe7\xbe\xa7\x51\x3d\x70\x7b\xff\xf7\x79\xe4\x91\x70\x77\xfe\xd7\x03\xab\x38\x5b\x08\x35\x9f\x28\x8a\x72\x31\x9d\x2f\x65\xf7\xc2\xbf\xec\xb5\x61\xa1\x0a\xb5\x95\x54\xd8\x43\x8a\xb2\x9a\x5a\x1f\xa6\x96\xcd\xfb\x36\xd9\xcc\x14\x17\x5e\x5e\xd3\x2f\xd3\xcb\x84\xd8\x89\x87\x8a\x70\x58\x04\xf8\x7c\xba\x9c\x2e\xce\x6d\x61\x99\xf9\xe6\x1d\x2f\x94\xcb\xc5\x07\xf3\xdf\x53\xbb\x61\x66\x6e\x4e\x8c\x79\x31\xd8\xd7\x98\xfc\x5a\x21\x09\x67\xbf\xbd\x9c\x4f\x39\x57\x4c\xe6\x53\x63\xc1\x07\x0f\xa0\x1f\xeb\x9e\xce\xa2\x04\x82\x88\xc6\x3a\xdd\xb2\xd2\x82\xe3\x12\xe8\x98\x87\x33\xb7\xd0\x09\xc3\xa7\x8c\xbc\x40\x07\x82\xc9\x72\x79\x28\x6a\x32\xf7\x62\x32\x95\x6b\xf9\x47\xbe\xe6\x47\x5c\x38\xd6\xe9\xde\x0d\xfe\xf1\x1d\xbe\x1c\x54\x83\x40\x43\x8d\x52\x63\x3e\x47\x52\x5f\x8e\xe5\x63\xad\x7d\x13\x8b\x3b\x69\x30\x3a\x3d\x8d\x44\x60\xf2\x2b\x6a\x78\xc3\x6e\xd8\x75\x8a\x23\xba\xc3\x4f\xe4\xe5\x63\x5b\xa9\xc1\x37\xc2\x39\x61\xb8\x47\xbc\x16\x22\xf8\x3b\xa4\x91\x70\xb0\x40\x58\x1b\x56\xf1\x7a\xac\x21\x30\x27\xad\x99\x73\x47\xc2\x10\x3c\x0a\x1d\x7e\x52\x0e\x8f\xae\x35\x9d\x4f\x8d\xd5\x54\x46\xb6\xf3\xb1\xad\x28\x1b\x1c\x26\xc3\x82\xd6\x35\x9c\x87\x03\xb5\x6f\xe2\xf6\x0b\xbc\x40\xf2\x5e\x68\x58\xbc\xbb\xca\x87\xe0\xdd\x86\xb8\x9b\xa2\x55\xe2\xb7\xe6\xd9\x3d\x3f\xcd\x19\x66\xdc\x28\x4e\xab\xf9\x73\x7f\x66\x0e\x06\x03\xf9\xd6\x1a\xd3\x58\x1c\xf9\xbc\x1d\xb2\xd7\x57\x4b\xfb\xfc\xd2\xe2\xf7\x67\xf4\x89\xe1\x28\x01\xcd\x13\x8c\xcc\x39\x55\x2d\xb4\xce\x2f\x2d\x2e\x0b\xa8\xe8\x27\x49\x4c\x18\xb0\x28\xe1\x22\xc1\x89\xa2\x9d\xbc\x32\xde\xed\xdf\xcc\x08\xb4\x80\x35\xc8\x07\xaf\x51\x49\x97\x20\x11\x49\x9c\x31\x87\xbf\xfb\x09\xdb\x6c\x6f\x75\x97\x46\xfd\xb5\x93\x66\x93\x90\x6e\x3d\xf1\x35\xa3\x7d\xee\x63\x9f\x51\x1a\x66\xfd\xdc\xdd\xb3\xd0\xe1\x0f\x87\x51\xe5\xb2\x09\x28\x04\x98\xfd\x79\x1c\x9f\xf0\xbf\x05\x9f\xaa\x07\x11\x12\xf1\x7c\x50\x72\xe9\xb8\xf9\xdf\x19\xe2\x29\x5a\xf4\xae\x65\x3f\x59\xd5\xaf\xe7\xac\xe8\x01\x6a\xad\xe0\x53\x89\xae\x29\xfd\x60\xba\x97\x96\xb9\x36\x27\xf6\x6c\xba\xb0\xff\x30\xe9\x8d\xba\x2f\x9f\x7e\x4a\x83\x10\xeb\x01\x0d\x9d\x38\xd0\x69\x1a\xc8\x27\xfd\xed\xd6\xef\xbb\x91\xd7\xaf\x39\x7f\xb6\x1b\xe8\x27\xbf\xe9\xaf\x9a\xb2\xff\x27\x61\x0e\x92\xdf\x18\x83\xbc\x04\x6a\x73\xcf\x15\x42\x6d\xb3\xb2\x3f\x6c\x58\xdb\x94\xdf\xc6\xd2\x28\x1a\xd4\xef\x2a\x91\x42\xf9\xaf\x95\x8a\x61\xad\xac\xe5\xe4\xc7\x4a\xa6\xbe\xe6\xff\x85\x39\x1a\x83\xf3\x97\x79\xe4\x59\x54\xf8\xc3\xca\xaa\x87\xaa\xa9\xc2\x0a\x9d\xef\xae\xb4\xf2\x29\xf9\xb8\xe2\x1e\x61\x3d\x57\x36\x79\x05\xfe\x2f\x00\x00\xff\xff\x75\x2e\x8a\x97\xb9\x16\x00\x00")

func scriptsMakefileTarsGomodMkBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMakefileTarsGomodMk,
		"scripts/makefile.tars.gomod.mk",
	)
}

func scriptsMakefileTarsGomodMk() (*asset, error) {
	bytes, err := scriptsMakefileTarsGomodMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/makefile.tars.gomod.mk", size: 5817, mode: os.FileMode(493), modTime: time.Unix(1682574489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsMakefileTarsMk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x6d\x6f\xab\x38\x16\xfe\x0c\xbf\xe2\x2c\x43\xb7\x71\x6f\x20\xb7\xad\xb4\x5a\x25\x62\xef\xa5\x29\x4d\x3b\xc3\x84\x28\x49\x67\xb5\x6a\x2a\x86\x82\x49\xac\x01\xcc\x82\x93\xbe\x4d\xfe\xfb\xca\x76\x20\xa1\x4d\xbb\x73\xa5\x36\x9f\x9c\xe3\xf3\xf2\x9c\x63\x9f\xc7\x87\x9f\x8c\x8f\xfd\xa9\x3f\xc5\xe4\x01\xc2\x39\x85\x90\xa6\x39\x49\x30\xe0\xa2\xa0\x85\x8a\x1f\x72\x5a\x30\x70\xfb\xbe\xed\xba\x00\x60\x01\xce\xfc\xeb\x89\x79\x3d\xbd\x30\xfe\x59\xef\xda\xc3\x01\xc0\xab\xdd\x0f\xc7\xa8\x0e\xbc\x91\x3d\xbd\x84\x6f\x16\xe8\xad\x72\x81\x93\x04\xe6\x14\x70\xb6\x02\xb9\x81\xd4\x81\x37\xf6\xbc\xe9\x5e\x05\xbe\xc1\x15\x60\x83\x54\x7f\x96\xb2\x75\xe7\x8e\x64\x9d\x39\x55\x3f\x1e\x6f\x42\xee\xf2\x80\x2d\x2c\xfd\xb9\x5c\xde\x95\x0c\xba\x6d\x68\xeb\xad\x0d\xd6\xb5\x3a\xb5\xc7\x93\x93\x0d\xa0\x2e\x47\x1c\x93\xa2\x64\xf7\xb4\x88\x38\xfa\xda\x02\x6a\x13\x84\x04\x56\x16\x14\xe5\x09\x07\x4c\x62\xfc\x5f\x68\xb5\xb9\x61\x16\x95\xac\x20\xd9\x1c\x0c\xba\x64\x11\x29\xda\x7a\xeb\xe7\x93\x81\xe7\x5f\xb8\xf6\x00\x21\xa4\xf2\x18\xb5\x00\x00\xbe\x58\x95\xa6\xb5\xc2\x59\xc4\x4f\x3a\x8b\x48\xac\xaa\xa3\xb3\x0a\x92\xf2\x23\x98\xf2\x82\x32\x1a\x7e\x42\x0d\x45\x95\xfc\xc9\xb8\xbf\x2d\xd3\x3d\x49\xa2\x30\x28\x22\x38\x32\x79\x29\x90\x3a\x1a\x7b\xb5\xc6\x97\x17\x1a\x02\x18\x3f\xf7\x5a\xe3\x95\x93\x39\x45\x1f\x0f\x5c\x60\x0f\x69\xfe\x18\xf3\x66\xb2\x80\xc4\xc0\x70\xc9\xc0\x78\x02\x4d\x6f\xd9\xa3\x11\xd2\xe0\xcf\x3f\x77\x65\x53\x7b\x3c\x70\xa6\x48\xeb\x01\x5b\xe0\x0c\x66\x2a\x34\x7f\x38\x5c\x50\xd0\x6e\x0e\xed\xd1\xe8\x10\x68\x01\x87\xd2\xe0\x10\x68\xce\x08\xcd\x80\x94\x80\xd3\x9c\x3d\x9a\xb7\x5a\x0f\xf0\x03\x61\x70\xdc\x6b\x7a\x51\x70\x52\x62\x98\xa9\x8a\x52\x09\x2a\x54\x7f\x03\x83\x1f\xf0\x09\x7a\x23\xb8\xa2\x6c\xa2\x0f\x29\x94\xcb\x70\x01\x11\x29\xba\x5c\xbf\x0d\x19\xbd\x87\x7b\x0c\x61\x81\x03\x86\x81\x30\x1e\x5e\x9a\x2b\x8a\xa2\xa4\x7f\x44\xa4\x00\x23\x97\xce\x79\x68\x45\x89\x49\x03\x57\xed\xbb\x4f\xf3\x47\x10\xe5\xd2\x5b\xc7\x08\x8c\x7f\x09\x23\x9e\x4d\x43\x3b\xcc\xc1\x58\x49\x15\x89\x58\x78\x8d\x49\x4f\x55\x6d\xd7\xed\x42\x5d\xc9\x4f\x39\xd3\xda\x7b\x17\xf8\xcd\x3c\xbb\xbe\x72\xcf\x45\x37\xf0\xfb\x85\x54\x85\x2f\x11\xdc\x2d\x49\x12\x49\xb1\xd0\x90\x7d\x08\x06\x05\xfd\xfb\xe7\xdc\x35\x12\x67\x9c\x0c\xf4\x16\xe7\x81\x5c\x16\x41\xf4\x0d\x42\x6d\xa4\xd6\x50\xbb\xbb\x3b\xaa\xf2\x5d\x94\xde\xc0\xa0\xcd\xf0\xcd\xe9\x69\xef\x38\x95\xdb\x27\x03\x0f\xcd\xf0\xcd\xd7\x14\xb8\xfc\x1f\xbd\xe3\x14\xf4\xe7\xca\x6e\x0d\x62\xcb\x34\x4d\x8d\xe7\x5b\xe9\xc3\x2e\xe5\x34\xc2\xf0\x6b\xf7\x7f\x20\x68\x19\x05\xde\xcc\xe2\xfc\xb5\x8a\x8c\xea\xa4\x36\x1d\xce\x53\x19\x8d\xbd\xda\x4d\x25\xde\x97\x88\x64\xa4\x57\x49\x6c\x4c\x1a\x39\x48\x63\xbd\x25\xb8\x0f\x71\xa5\xb3\x2a\x91\x35\xe8\xad\x20\x8a\xf2\x02\xf3\xf7\xd1\x30\x84\x57\x5f\xb0\x3a\x27\xc1\x92\x3f\x7f\x7a\x8b\xdf\xf1\x2d\x1a\x84\x50\x03\x9b\xde\x8a\x69\x81\x83\x70\x21\x92\x6b\xef\x64\xa3\xb7\xf0\x2a\x48\xe0\xbd\xf0\x8d\x90\x55\x24\xee\x47\x04\x91\x0b\xa4\x2a\x31\x2d\x64\xeb\x90\x6c\x0b\xab\x06\xc4\x1b\x2f\xa2\xa2\x51\x22\x52\x64\x41\x8a\x2d\x5d\xf8\xe2\x4b\xd0\x75\xe1\x46\x74\xe7\x9b\x28\xe6\xd4\xa7\x4b\x66\xe5\xc9\x72\x4e\xb2\xd2\xe2\x67\x55\xe4\x61\x57\xd7\x2b\x2f\x4d\xa0\x7a\xd3\xb9\x04\x90\x61\x79\x15\xde\x3b\x42\x7e\x11\x84\xa3\xe6\x4d\xf8\x8c\x96\x61\x41\xb1\xc3\x16\xa0\xb7\xfa\xde\xf0\xe2\x6a\xc0\xa1\x90\x18\x6e\x24\x25\x6e\x76\x7d\x96\xe6\x3e\x2f\xfe\x6d\xcd\x90\x15\x6f\x71\xe9\x22\x28\x39\xe5\x96\xac\xfb\xca\xa2\x0d\xc1\x1d\x2d\x98\xa9\x49\xa2\xda\x12\xf3\x96\x8d\x25\x49\xbe\x8e\xf5\x4a\xd2\xa9\x25\xe2\xb0\x38\x13\x16\xf1\xbe\x14\xde\x33\xed\x48\x20\xe1\x9e\xec\x7a\xbc\x07\xc1\x30\xf0\x43\x98\x2c\x23\x6c\x69\x66\xb9\xca\xb4\x5d\x81\x2f\x05\xe1\xd3\x6a\x27\xae\xc9\xe6\x4f\xb0\xeb\x3f\x8c\xc0\x34\x65\x18\x59\xc9\x78\xe7\x81\xe3\xda\x5a\xa3\x8e\x4a\xba\x02\xe3\x6d\x87\xe6\xef\x11\x7f\x5a\xbe\x1c\xfc\xe7\x20\x3d\x88\x0e\x2e\x0f\x7e\x3d\x98\xfc\xce\x55\x64\x04\xf9\x9c\x08\x27\xef\x64\x2d\x5c\x9a\x9b\xdc\x8b\xb4\x59\xb8\x6d\xfe\xdb\x63\xe5\x95\x08\x57\xf1\xd3\x0b\x54\x9c\x31\x84\x5a\x4c\x36\xb3\xc9\xbf\x9d\x33\xff\xd2\x9b\x4c\x01\xf8\xdc\xb9\x60\x2c\xef\x76\x3a\x09\x0d\x83\x64\x41\x4b\xd6\x3d\xfd\xfa\xf5\xeb\x56\x71\xea\xfd\xe2\x0c\x85\xa2\xa6\xa9\xd7\x23\xd7\xb3\xcf\xfd\xeb\x89\x33\x16\x6f\xdb\xce\xd8\x7a\xbf\xa0\x41\x4a\x50\xa5\xe2\x4d\x36\xcf\xdf\x37\x0b\x12\x92\x2d\x1f\xd4\x65\x9e\xd0\x20\xea\xc2\x66\x04\x1f\x78\xde\xc4\xd2\x9f\x6b\xf5\x75\xad\xc0\x82\xa2\xee\xad\x66\x2a\x86\x61\x80\x1c\x45\xcc\xe6\x06\x78\x93\xae\x98\x8f\xbd\xc9\x5a\x53\x95\x70\x59\x24\x15\xfd\x57\xc9\xae\x3b\x41\x4e\x3a\x32\x86\x1f\x64\x91\x9f\x2f\xef\x12\x52\x2e\xbe\x31\x12\xfe\x81\x99\xb5\xa3\x2e\x52\x5e\x83\x71\x51\x2e\x4b\x6c\x7d\x17\x3b\x03\x67\xba\x96\x18\x2e\x82\x3c\x4f\x48\x18\xf0\x11\xc6\xd2\x9f\xed\xd1\x88\xab\xa6\x34\x5a\x26\xd8\x97\x4c\x55\x19\x80\x71\x11\xd2\x34\xc5\x19\xb3\x64\x60\x1c\x19\x77\x8f\x46\x9d\x35\xaf\xe3\xba\xce\x75\x96\x7d\x20\x57\xcc\x32\x4d\x55\x2f\x1d\x77\x24\xe7\x4b\xbe\xf2\xa7\xf6\x18\xed\x3c\x51\xf5\x93\xd6\x46\xaa\x3a\x71\xc6\xbf\x39\x63\x7f\x68\xff\xea\xc8\x71\xb3\x1a\x49\x36\x7c\xf6\x39\xd3\x66\x82\x83\xac\xab\x8a\xdb\x2d\xba\xe9\xdc\x19\x39\xc3\x73\x5f\x20\xf3\xce\x7e\xe6\xac\x70\x35\xfc\xcd\xfb\xc5\xf1\xf7\xec\xb8\x5e\xdf\x76\xab\x3f\x5b\x42\x91\xab\x09\x92\xee\xfc\x8b\x2b\xd7\xe1\x8f\x43\xdf\x75\xec\x21\xff\xb3\x06\xf3\xc8\x8c\x4c\x96\xe6\x30\x4f\x69\x66\xd2\x25\xab\x11\x1c\xd5\x8e\x8e\xf8\x61\x6f\x10\x06\x49\xf2\x16\xc8\x4b\xf4\x42\xd0\x1f\x8d\x5e\x8a\xf6\xc1\xbd\xec\x3b\xd2\x96\x2f\x36\x36\x3f\x92\xc2\x91\x49\xb7\x69\xf0\xc5\x5f\xc8\xe5\xc5\x6d\x10\xde\xd0\x5e\xa9\xed\xba\x48\xea\xcb\xff\xf2\xfb\x53\x9b\x65\x33\x7c\x73\xdc\x3b\x3d\x4d\x45\x59\xc4\x3c\xd2\x9d\xb1\x19\xbb\x29\x70\x4a\x57\xf8\x8d\x33\xb9\xd5\xd4\x86\xeb\x3d\xae\x82\x24\xa9\xbc\xdd\x08\x01\xfc\x1d\x8a\x54\x24\x56\x59\x4f\xed\x71\xf5\x21\xbc\x63\xcd\x82\x62\x07\xc6\x3d\x49\x12\x88\x28\x1c\x72\x2a\x7c\xc9\xcd\x63\xc7\x75\xec\x89\x23\xab\x79\x78\xab\xa9\xea\x02\x27\x79\x77\x67\x12\x93\x25\x40\x9a\xe8\x9d\x0f\xff\x2e\xfc\x5f\x00\x00\x00\xff\xff\xf4\xe3\xf5\x30\x01\x11\x00\x00")

func scriptsMakefileTarsMkBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMakefileTarsMk,
		"scripts/makefile.tars.mk",
	)
}

func scriptsMakefileTarsMk() (*asset, error) {
	bytes, err := scriptsMakefileTarsMkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/makefile.tars.mk", size: 4353, mode: os.FileMode(493), modTime: time.Unix(1682574489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmake/CMakeDetermineGoCompiler.cmake": cmakeCmakedeterminegocompilerCmake,
	"cmake/CMakeGoCompiler.cmake.in":       cmakeCmakegocompilerCmakeIn,
	"cmake/CMakeGoInformation.cmake":       cmakeCmakegoinformationCmake,
	"cmake/CMakeTestGoCompiler.cmake":      cmakeCmaketestgocompilerCmake,
	"cmake/golang.cmake":                   cmakeGolangCmake,
	"cmake/tars-tools.cmake":               cmakeTarsToolsCmake,
	"scripts/makefile.tars.gomod.mk":       scriptsMakefileTarsGomodMk,
	"scripts/makefile.tars.mk":             scriptsMakefileTarsMk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmake": &bintree{nil, map[string]*bintree{
		"CMakeDetermineGoCompiler.cmake": &bintree{cmakeCmakedeterminegocompilerCmake, map[string]*bintree{}},
		"CMakeGoCompiler.cmake.in":       &bintree{cmakeCmakegocompilerCmakeIn, map[string]*bintree{}},
		"CMakeGoInformation.cmake":       &bintree{cmakeCmakegoinformationCmake, map[string]*bintree{}},
		"CMakeTestGoCompiler.cmake":      &bintree{cmakeCmaketestgocompilerCmake, map[string]*bintree{}},
		"golang.cmake":                   &bintree{cmakeGolangCmake, map[string]*bintree{}},
		"tars-tools.cmake":               &bintree{cmakeTarsToolsCmake, map[string]*bintree{}},
	}},
	"scripts": &bintree{nil, map[string]*bintree{
		"makefile.tars.gomod.mk": &bintree{scriptsMakefileTarsGomodMk, map[string]*bintree{}},
		"makefile.tars.mk":       &bintree{scriptsMakefileTarsMk, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
