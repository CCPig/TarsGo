// Code generated by tars2go 1.2.3, DO NOT EDIT.
// This file was generated from AuthF.tars
// Package authf comment
package authf

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/endpoint"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = codec.FromInt8
	_ = bytes.ErrTooLarge
)

type AuthServant interface {
	AuthProcess(request *AuthRequest) (ret int32, err error)
	GetTokens(request *TokenRequest) (ret []TokenResponse, err error)
	ApplyToken(request *ApplyTokenRequest) (ret ApplyTokenResponse, err error)
	DeleteToken(request *DeleteTokenRequest) (ret int32, err error)
}

type AuthServantWithContext interface {
	AuthProcess(tarsCtx context.Context, request *AuthRequest) (ret int32, err error)
	GetTokens(tarsCtx context.Context, request *TokenRequest) (ret []TokenResponse, err error)
	ApplyToken(tarsCtx context.Context, request *ApplyTokenRequest) (ret ApplyTokenResponse, err error)
	DeleteToken(tarsCtx context.Context, request *DeleteTokenRequest) (ret int32, err error)
}

// Auth struct
type Auth struct {
	servant model.Servant
}

// NewAuth creates a new Auth servant.
func NewAuth() *Auth {
	return new(Auth)
}

// SetServant sets servant for the service.
func (obj *Auth) SetServant(servant model.Servant) {
	obj.servant = servant
}

// TarsSetTimeout sets the timeout for the servant which is in ms.
func (obj *Auth) TarsSetTimeout(timeout int) {
	obj.servant.TarsSetTimeout(timeout)
}

// TarsSetProtocol sets the protocol for the servant.
func (obj *Auth) TarsSetProtocol(p model.Protocol) {
	obj.servant.TarsSetProtocol(p)
}

// Endpoints returns all active endpoint.Endpoint
func (obj *Auth) Endpoints() []*endpoint.Endpoint {
	return obj.servant.Endpoints()
}

// AuthProcess is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) AuthProcess(request *AuthRequest, opts ...map[string]string) (int32, error) {
	return obj.AuthProcessWithContext(context.Background(), request, opts...)
}

// AuthProcessWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) AuthProcessWithContext(tarsCtx context.Context, request *AuthRequest, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "authProcess", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}
	readBuf := codec.NewReader(tools.Int8ToByte(tarsResp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range tarsResp.Status {
			statusMap[k] = v
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// AuthProcessOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) AuthProcessOneWayWithContext(tarsCtx context.Context, request *AuthRequest, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "authProcess", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTokens is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) GetTokens(request *TokenRequest, opts ...map[string]string) ([]TokenResponse, error) {
	return obj.GetTokensWithContext(context.Background(), request, opts...)
}

// GetTokensWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) GetTokensWithContext(tarsCtx context.Context, request *TokenRequest, opts ...map[string]string) (ret []TokenResponse, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "getTokens", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}
	readBuf := codec.NewReader(tools.Int8ToByte(tarsResp.SBuffer))
	_, ty, err = readBuf.SkipToNoCheck(0, true)
	if err != nil {
		return ret, err
	}
	if ty == codec.LIST {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return ret, err
		}
		ret = make([]TokenResponse, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			err = ret[i0].ReadBlock(readBuf, 0, true)
			if err != nil {
				return ret, err
			}
		}
	} else if ty == codec.SimpleList {
		err = fmt.Errorf("not support SimpleList type")
		if err != nil {
			return ret, err
		}
	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range tarsResp.Status {
			statusMap[k] = v
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTokensOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) GetTokensOneWayWithContext(tarsCtx context.Context, request *TokenRequest, opts ...map[string]string) (ret []TokenResponse, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "getTokens", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// ApplyToken is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) ApplyToken(request *ApplyTokenRequest, opts ...map[string]string) (ApplyTokenResponse, error) {
	return obj.ApplyTokenWithContext(context.Background(), request, opts...)
}

// ApplyTokenWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) ApplyTokenWithContext(tarsCtx context.Context, request *ApplyTokenRequest, opts ...map[string]string) (ret ApplyTokenResponse, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "applyToken", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}
	readBuf := codec.NewReader(tools.Int8ToByte(tarsResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range tarsResp.Status {
			statusMap[k] = v
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// ApplyTokenOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) ApplyTokenOneWayWithContext(tarsCtx context.Context, request *ApplyTokenRequest, opts ...map[string]string) (ret ApplyTokenResponse, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "applyToken", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// DeleteToken is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) DeleteToken(request *DeleteTokenRequest, opts ...map[string]string) (int32, error) {
	return obj.DeleteTokenWithContext(context.Background(), request, opts...)
}

// DeleteTokenWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) DeleteTokenWithContext(tarsCtx context.Context, request *DeleteTokenRequest, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 0, "deleteToken", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}
	readBuf := codec.NewReader(tools.Int8ToByte(tarsResp.SBuffer))
	err = readBuf.ReadInt32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range tarsResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range tarsResp.Status {
			statusMap[k] = v
		}
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// DeleteTokenOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (obj *Auth) DeleteTokenOneWayWithContext(tarsCtx context.Context, request *DeleteTokenRequest, opts ...map[string]string) (ret int32, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = request.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	tarsResp := new(requestf.ResponsePacket)
	err = obj.servant.TarsInvoke(tarsCtx, 1, "deleteToken", buf.ToBytes(), statusMap, contextMap, tarsResp)
	if err != nil {
		return ret, err
	}

	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// Dispatch is used to call the server side implement for the method defined in the tars file. withContext shows using context or not.
func (obj *Auth) Dispatch(tarsCtx context.Context, val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, withContext bool) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	readBuf := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	buf := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "authProcess":
		var request AuthRequest
		if tarsReq.IVersion == basef.TARSVERSION {
			err = request.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("request", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = request.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["request"])
				request.ResetDefault()
				if err = json.Unmarshal(jsonStr, &request); err != nil {
					return err
				}
			}
		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(AuthServant)
			funRet, err = imp.AuthProcess(&request)
		} else {
			imp := val.(AuthServantWithContext)
			funRet, err = imp.AuthProcess(tarsCtx, &request)
		}
		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "getTokens":
		var request TokenRequest
		if tarsReq.IVersion == basef.TARSVERSION {
			err = request.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("request", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = request.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["request"])
				request.ResetDefault()
				if err = json.Unmarshal(jsonStr, &request); err != nil {
					return err
				}
			}
		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet []TokenResponse
		if !withContext {
			imp := val.(AuthServant)
			funRet, err = imp.GetTokens(&request)
		} else {
			imp := val.(AuthServantWithContext)
			funRet, err = imp.GetTokens(tarsCtx, &request)
		}
		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}
			err = buf.WriteInt32(int32(len(funRet)), 0)
			if err != nil {
				return err
			}
			for _, v := range funRet {
				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}
			err = buf.WriteInt32(int32(len(funRet)), 0)
			if err != nil {
				return err
			}
			for _, v := range funRet {
				err = v.WriteBlock(buf, 0)
				if err != nil {
					return err
				}
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "applyToken":
		var request ApplyTokenRequest
		if tarsReq.IVersion == basef.TARSVERSION {
			err = request.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("request", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = request.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["request"])
				request.ResetDefault()
				if err = json.Unmarshal(jsonStr, &request); err != nil {
					return err
				}
			}
		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet ApplyTokenResponse
		if !withContext {
			imp := val.(AuthServant)
			funRet, err = imp.ApplyToken(&request)
		} else {
			imp := val.(AuthServantWithContext)
			funRet, err = imp.ApplyToken(tarsCtx, &request)
		}
		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}
	case "deleteToken":
		var request DeleteTokenRequest
		if tarsReq.IVersion == basef.TARSVERSION {
			err = request.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			reqTup := tup.NewUniAttribute()
			reqTup.Decode(readBuf)

			var tupBuffer []byte

			reqTup.GetBuffer("request", &tupBuffer)
			readBuf.Reset(tupBuffer)
			err = request.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["request"])
				request.ResetDefault()
				if err = json.Unmarshal(jsonStr, &request); err != nil {
					return err
				}
			}
		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var funRet int32
		if !withContext {
			imp := val.(AuthServant)
			funRet, err = imp.DeleteToken(&request)
		} else {
			imp := val.(AuthServantWithContext)
			funRet, err = imp.DeleteToken(tarsCtx, &request)
		}
		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			buf.Reset()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.TUPVERSION {
			rspTup := tup.NewUniAttribute()

			err = buf.WriteInt32(funRet, 0)
			if err != nil {
				return err
			}

			rspTup.PutBuffer("", buf.ToBytes())
			rspTup.PutBuffer("tars_ret", buf.ToBytes())

			buf.Reset()
			err = rspTup.Encode(buf)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["tars_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var statusMap map[string]string
	if status, ok := current.GetResponseStatus(tarsCtx); ok && status != nil {
		statusMap = status
	}
	var contextMap map[string]string
	if ctx, ok := current.GetResponseContext(tarsCtx); ok && ctx != nil {
		contextMap = ctx
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(buf.ToBytes()),
		Status:       statusMap,
		SResultDesc:  "",
		Context:      contextMap,
	}

	_ = readBuf
	_ = buf
	_ = length
	_ = have
	_ = ty
	return nil
}
